import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

iris = pd.read_csv("data/iris.data", header=None)
# absolute path /home/handworked/BDA_602_chu/data/iris.data
iris.columns = ["sepal_length", "sepal_width", "petal_length", "petal_width", "class"]
print(iris.head(5))
print(iris.tail(5))


# make summary statistics for each column
def column_summary_statistics(column):
    if np.issubdtype(
        column.dtype, np.number
    ):  # need to have check for string, otherwise quartile breaks
        mean = np.mean(column)
        min = np.min(column)
        max = np.max(column)
        quartiles = np.percentile(column, [25, 50, 75])

        return pd.Series(
            {
                "mean": mean,
                "minimum": min,
                "maximum": max,
                "25%": quartiles[0],
                "50%": quartiles[1],
                "75%": quartiles[2],
            }
        )
    else:
        return pd.Series(
            {
                "mean": np.nan,
                "minimum": np.nan,
                "maximum": np.nan,
                "25%": np.nan,
                "50%": np.nan,
                "75%": np.nan,
            }
        )


# apply column_summary_statistcs to entire dataframe
def summary_statistics(df):
    return df.apply(column_summary_statistics)


print(summary_statistics(iris))

# need to figure how to display plots
fig1 = px.scatter(
    iris,
    x="sepal_length",
    y="sepal_width",
    color="class",
    title="Sepal Length vs Width",
)
fig1.show()

fig2 = px.scatter(
    iris,
    x="petal_length",
    y="petal_width",
    color="class",
    title="Petal Length vs Width",
)
fig2.show()

fig3 = px.histogram(iris, x="sepal_length", y="sepal_width", color="class")
fig3.show()

fig4 = px.histogram(iris, x="petal_length", y="petal_width", color="class")
fig4.show()

fig5 = px.violin(iris, x="petal_length", y="sepal_length", color="class", box=True)
fig5.show()

iris_features = iris.drop(columns=["class"], axis=1)
scaler = StandardScaler()
scaler.fit(iris_features)

x_scaled = scaler.transform(iris_features)

rf = RandomForestClassifier()

rf.fit(x_scaled, iris["class"])

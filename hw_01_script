import pandas as pd
import numpy as np
import plotly.express as px
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.pipeline import Pipeline

data_dir = "data"
file_path = "iris.data"

abs_data_dir = os.path.join(os.path.dirname(__file__), data_dir)
abs_file_path = os.path.join(abs_data_dir, file_path)

iris = pd.read_csv(abs_file_path, header=None)
iris.columns = ["sepal_length", "sepal_width", "petal_length", "petal_width", "class"]
print(iris.head(5))
print(iris.tail(5))


# make summary statistics for each column
def column_summary_statistics(column):
    if np.issubdtype(
        column.dtype, np.number
    ):  # need to have check for string, otherwise quartile breaks
        mean = np.mean(column)
        min = np.min(column)
        max = np.max(column)
        quartiles = np.percentile(column, [25, 50, 75])

        return pd.Series(
            {
                "mean": mean,
                "minimum": min,
                "maximum": max,
                "25%": quartiles[0],
                "50%": quartiles[1],
                "75%": quartiles[2],
            }
        )
    else:
        return pd.Series(
            {
                "mean": np.nan,
                "minimum": np.nan,
                "maximum": np.nan,
                "25%": np.nan,
                "50%": np.nan,
                "75%": np.nan,
            }
        )


# apply column_summary_statistcs to entire dataframe
def summary_statistics(df):
    return df.apply(column_summary_statistics)


print(summary_statistics(iris))

# need to figure how to display plots
fig1 = px.scatter(
    iris,
    x="sepal_length",
    y="sepal_width",
    color="class",
    title="Sepal Length vs Width",
)
fig1.show()

fig2 = px.scatter(
    iris,
    x="petal_length",
    y="petal_width",
    color="class",
    title="Petal Length vs Width",
)
fig2.show()

fig3 = px.histogram(iris, x="sepal_length", y="sepal_width", color="class")
fig3.show()

fig4 = px.histogram(iris, x="petal_length", y="petal_width", color="class")
fig4.show()

fig5 = px.violin(iris, x="petal_length", y="sepal_length", color="class", box=True)
fig5.show()

iris_features = iris.drop(columns=["class"], axis=1)

rf_pipeline = Pipeline(
    [("scaler", StandardScaler()), ("classifier", RandomForestClassifier())]
)
rf_pipeline.fit(iris_features, iris["class"])
print(rf_pipeline.score(iris_features, iris["class"]))

knn_pipeline = Pipeline(
    [("scaler", StandardScaler()), ("classifier", KNeighborsClassifier())]
)
knn_pipeline.fit(iris_features, iris["class"])
print(rf_pipeline.score(iris_features, iris["class"]))

dt_pipeline = Pipeline(
    [("scaler", StandardScaler()), ("classifier", DecisionTreeClassifier())]
)
dt_pipeline.fit(iris_features, iris["class"])
print(dt_pipeline.score(iris_features, iris["class"]))
